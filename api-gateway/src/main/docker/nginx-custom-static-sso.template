# ---------------------
# custom_nginx.template
# ---------------------

worker_processes ${{NGINX_WORKER_PROCESSES}}; # can be set by kong.conf
daemon ${{NGINX_DAEMON}};                     # can be set by kong.conf

pid pids/nginx.pid;                      # this setting is mandatory
error_log logs/error.log ${{LOG_LEVEL}}; # can be set by kong.conf
events {}

http {
 	charset UTF-8;
	error_log ${{PROXY_ERROR_LOG}} ${{LOG_LEVEL}};
	client_max_body_size ${{CLIENT_MAX_BODY_SIZE}};
	proxy_ssl_server_name on;
	underscores_in_headers on;
	lua_package_path '${{LUA_PACKAGE_PATH}};;';
	lua_package_cpath '${{LUA_PACKAGE_CPATH}};;';
	lua_socket_pool_size ${{LUA_SOCKET_POOL_SIZE}};
	lua_max_running_timers 4096;
	lua_max_pending_timers 16384;
	lua_shared_dict kong                5m;
	lua_shared_dict kong_db_cache       ${{MEM_CACHE_SIZE}};
	lua_shared_dict kong_db_cache_miss 12m;
	lua_shared_dict kong_locks          8m;
	lua_shared_dict kong_process_events 5m;
	lua_shared_dict kong_cluster_events 5m;
	lua_shared_dict kong_healthchecks   5m;
	lua_shared_dict kong_rate_limiting_counters 12m;
	lua_socket_log_errors off;
	
> if lua_ssl_trusted_certificate then
	lua_ssl_trusted_certificate '${{LUA_SSL_TRUSTED_CERTIFICATE}}';
> end
	lua_ssl_verify_depth ${{LUA_SSL_VERIFY_DEPTH}};
	# injected nginx_http_* directives
> for _, el in ipairs(nginx_http_directives)  do
	$(el.name) $(el.value);
> end
	init_by_lua_block {
	    Kong = require 'kong'
	    Kong.init()
	}
	init_worker_by_lua_block {
	    Kong.init_worker()
	}
> if #proxy_listeners > 0 then
	upstream kong_upstream {
	    server 0.0.0.1;
	    balancer_by_lua_block {
	        Kong.balancer()
	    }
> if upstream_keepalive > 0 then
    keepalive ${{UPSTREAM_KEEPALIVE}};
> end
	}
	server {
	    server_name localhost;
> for i = 1, #proxy_listeners do
    listen $(proxy_listeners[i].listener);
> end
	    error_page 400 404 408 411 412 413 414 417 494 /kong_error_handler;
	    error_page 500 502 503 504 /kong_error_handler;
	    access_log ${{PROXY_ACCESS_LOG}};
	    error_log ${{PROXY_ERROR_LOG}} ${{LOG_LEVEL}};
	    client_body_buffer_size ${{CLIENT_BODY_BUFFER_SIZE}};
> if proxy_ssl_enabled then
    ssl_certificate ${{SSL_CERT}};
    ssl_certificate_key ${{SSL_CERT_KEY}};
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_certificate_by_lua_block {
        Kong.ssl_certificate()
    }
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ${{SSL_CIPHERS}};
> end
> if client_ssl then
    proxy_ssl_certificate ${{CLIENT_SSL_CERT}};
    proxy_ssl_certificate_key ${{CLIENT_SSL_CERT_KEY}};
> end
    real_ip_header     ${{REAL_IP_HEADER}};
    real_ip_recursive  ${{REAL_IP_RECURSIVE}};
> for i = 1, #trusted_ips do
    set_real_ip_from   $(trusted_ips[i]);
> end
    # injected nginx_proxy_* directives
> for _, el in ipairs(nginx_proxy_directives) do
    $(el.name) $(el.value);
> end
	
	    location / {	    
			root /www/data;
			types {
			    text/html                             html htm shtml;
			    text/css                              css;
			    text/xml                              xml;
			    image/gif                             gif;
			    image/jpeg                            jpeg jpg;
			    application/x-javascript              js;
			    application/atom+xml                  atom;
			    application/rss+xml                   rss;
			
			    text/mathml                           mml;
			    text/plain                            txt;
			    text/vnd.sun.j2me.app-descriptor      jad;
			    text/vnd.wap.wml                      wml;
			    text/x-component                      htc;
			
			    image/png                             png;
			    image/tiff                            tif tiff;
			    image/vnd.wap.wbmp                    wbmp;
			    image/x-icon                          ico;
			    image/x-jng                           jng;
			    image/x-ms-bmp                        bmp;
			    image/svg+xml                         svg svgz;
			    image/webp                            webp;
			
			    application/vnd.openxmlformats-officedocument.wordprocessingml.document    docx;
			    application/vnd.openxmlformats-officedocument.presentationml.slideshow    ppsx;
			    application/vnd.openxmlformats-officedocument.presentationml.presentation    pptx;
			    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet        xlsx;
			
			    application/java-archive              jar war ear;
			    application/mac-binhex40              hqx;
			    application/msword                    doc;
			    application/pdf                       pdf;
			    application/postscript                ps eps ai;
			    application/rtf                       rtf;
			    application/vnd.ms-excel              xls;
			    application/vnd.ms-powerpoint         ppt;
			    application/vnd.wap.wmlc              wmlc;
			    application/vnd.google-earth.kml+xml  kml;
			    application/vnd.google-earth.kmz      kmz;
			    application/x-7z-compressed           7z;
			    application/x-cocoa                   cco;
			    application/x-java-archive-diff       jardiff;
			    application/x-java-jnlp-file          jnlp;
			    application/x-makeself                run;
			    application/x-perl                    pl pm;
			    application/x-pilot                   prc pdb;
			    application/x-rar-compressed          rar;
			    application/x-redhat-package-manager  rpm;
			    application/x-sea                     sea;
			    application/x-shockwave-flash         swf;
			    application/x-stuffit                 sit;
			    application/x-tcl                     tcl tk;
			    application/x-x509-ca-cert            der pem crt;
			    application/x-xpinstall               xpi;
			    application/xhtml+xml                 xhtml;
			    application/zip                       zip;
			
			    application/octet-stream              bin exe dll;
			    application/octet-stream              deb;
			    application/octet-stream              dmg;
			    application/octet-stream              eot;
			    application/octet-stream              iso img;
			    application/octet-stream              msi msp msm;
			
			    audio/midi                            mid midi kar;
			    audio/mpeg                            mp3;
			    audio/ogg                             ogg;
			    audio/x-realaudio                     ra;
			    audio/x-m4a                           m4a;
			
			    video/3gpp                            3gpp 3gp;
			    video/mpeg                            mpeg mpg;
			    video/quicktime                       mov;
			    video/x-flv                           flv;
			    video/x-mng                           mng;
			    video/x-ms-asf                        asx asf;
			    video/x-ms-wmv                        wmv;
			    video/x-msvideo                       avi;
			
			    video/mp4                             mp4;
			    video/webm                            webm;
			    video/x-m4v                           m4v;
			
			}
		}
	   
	    
	    location /auth/ {
	        proxy_pass          http://iam:8080/auth/;
	        proxy_set_header    Host               $host;
	        proxy_set_header    X-Real-IP          $remote_addr;
	        proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
	        proxy_set_header    X-Forwarded-Host   $host;
	        proxy_set_header    X-Forwarded-Server $host;
	        proxy_set_header    X-Forwarded-Port   $server_port;
	        proxy_set_header    X-Forwarded-Proto  $scheme;
     	        
	    }
	    
	    
	    location /api {
            proxy_buffer_size   128k;
            proxy_buffers   4 256k;
            proxy_busy_buffers_size   256k;

	        default_type                     '';
	        set $ctx_ref                     '';
	        set $upstream_host               '';
	        set $upstream_upgrade            '';
	        set $upstream_connection         '';
	        set $upstream_scheme             '';
	        set $upstream_uri                '';
	        set $upstream_x_forwarded_for    '';
	        set $upstream_x_forwarded_proto  '';
	        set $upstream_x_forwarded_host   '';
	        set $upstream_x_forwarded_port   '';
	        rewrite_by_lua_block {
	            Kong.rewrite()
	        }
	        access_by_lua_block {
	            Kong.access()
	        }
	        proxy_http_version 1.1;
	        
	        proxy_set_header   Host              $upstream_host;
	        proxy_set_header   Upgrade           $upstream_upgrade;
	        proxy_set_header   Connection        $upstream_connection;
	        proxy_set_header   X-Forwarded-For   $upstream_x_forwarded_for;
	        proxy_set_header   X-Forwarded-Proto $upstream_x_forwarded_proto;
	        proxy_set_header   X-Forwarded-Host  $upstream_x_forwarded_host;
	        proxy_set_header   X-Forwarded-Port  $upstream_x_forwarded_port;
	        proxy_set_header   X-Real-IP         $remote_addr;
	        proxy_pass_header  Server;
	        proxy_pass_header  Date;
	        proxy_ssl_name     $upstream_host;
	        proxy_pass         $upstream_scheme://kong_upstream$upstream_uri;



	        header_filter_by_lua_block {
	            Kong.header_filter()
	        }
	        body_filter_by_lua_block {
	            Kong.body_filter()
	        }
	        log_by_lua_block {
	            Kong.log()
	        }
	    }
	    location = /kong_error_handler {
	        internal;
	        uninitialized_variable_warn off;
	        content_by_lua_block {
	            Kong.handle_error()
	        }
	        header_filter_by_lua_block {
	            Kong.header_filter()
	        }
	        body_filter_by_lua_block {
	            Kong.body_filter()
	        }
	        log_by_lua_block {
	            Kong.log()
	        }
	    }
	}
> end

> if #admin_listeners > 0 then
	server {
	    server_name kong_admin;
> for i = 1, #admin_listeners do
    listen $(admin_listeners[i].listener);
> end
	    access_log ${{ADMIN_ACCESS_LOG}};
	    error_log ${{ADMIN_ERROR_LOG}} ${{LOG_LEVEL}};
	    client_max_body_size 10m;
	    client_body_buffer_size 10m;
> if admin_ssl_enabled then
    ssl_certificate ${{ADMIN_SSL_CERT}};
    ssl_certificate_key ${{ADMIN_SSL_CERT_KEY}};
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ${{SSL_CIPHERS}};
> end
	    # injected nginx_admin_* directives
> for _, el in ipairs(nginx_admin_directives) do
    $(el.name) $(el.value);
> end
	    location / {
	        default_type application/json;
	        content_by_lua_block {
	            Kong.serve_admin_api()
	        }
	    }
	    location /nginx_status {
	        internal;
	        access_log off;
	        stub_status;
	    }
	    location /robots.txt {
	        return 200 'User-agent: *\nDisallow: /';
	    }
	}
> end
}