version: "3.5"

services:

  #Zookeeper service provides distributed configuration management to Kafka
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper 
    hostname: zookeeper
    networks:
      - backend-network
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./target/zk-single-kafka-single/zoo1/data:/data
      - ./target/zk-single-kafka-single/zoo1/datalog:/datalog

#   kafka is the messaging backbone of the micro-service architecture. The objective is avoid point 2 point connections.
  kafka:
    image: confluentinc/cp-kafka:5.3.3
    container_name: kafka 
    hostname: kafka
    networks:
      - backend-network    
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - ./target/zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper


#################################################################################################
#												#
#################################################################################################


 # profile-database:
 #   image: postgres:10
 #   container_name: profile-database
 #   hostname: profile-database
 #   networks:
 #    - backend-network
 #   environment:
 #     POSTGRES_USER: pro
 #     POSTGRES_PASSWORD: pro
 #     POSTGRES_DB: pro
 #   healthcheck:
 #     test: ["CMD", "pg_isready", "-U", "pro", "-d", "pro"]
 #     interval: 30s
 #     timeout: 30s
 #     retries: 3
 #   volumes:
 #     - pgdata-pro:/var/lib/postgresql/data
 #     - ./test-data/profile.sql:/docker-entrypoint-initdb.d/init.sql
 #   restart: on-failure
 #   stdin_open: true
 #   tty: true

  #The counterparty service provides counterparty data, it is also the single version of truth for these data
  profile-service:
    container_name: profile-service  
    image: diges/profile-service:latest
    hostname: profile-service
    environment:
  #    THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_PROFILE_CONNECTION_DASH_URL: "jdbc:postgresql://profile-database:5432/profile"
  #    THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_PROFILE_DRIVER_DASH_NAME: 'postgresql'   
  #    THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_PROFILE_USER_DASH_NAME: 'pro'
  #    THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_PROFILE_PASSWORD: 'pro'
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
    networks:
      - backend-network 
    ports:
      - "12083:28080"
    depends_on:
       - kafka

#################################################################################################
#												#
#################################################################################################


#  recipes-database:
#    image: postgres:10
#    container_name: recipes-database
#    hostname: recipes-database
#    networks:
#     - backend-network
#    environment:
#      POSTGRES_USER: rec
#      POSTGRES_PASSWORD: rec
#      POSTGRES_DB: rec
#    healthcheck:
#      test: ["CMD", "pg_isready", "-U", "rec", "-d", "rec"]
#      interval: 30s
#      timeout: 30s
#      retries: 3
#    volumes:
#      - pgdata-rec:/var/lib/postgresql/data
#      - ./test-data/recipes.sql:/docker-entrypoint-initdb.d/init.sql
#    restart: on-failure
#    stdin_open: true
#    tty: true

  #The counterparty service provides counterparty data, it is also the single version of truth for these data
  recipes-service:
    container_name: recipes-service  
    image: diges/recipes-service:latest
    hostname: recipes-service
    environment:
 #     THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_RECIPES_CONNECTION_DASH_URL: "jdbc:postgresql://recipes-database:5432/recipes"
 #     THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_RECIPES_DRIVER_DASH_NAME: 'postgresql'   
 #     THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_RECIPES_USER_DASH_NAME: 'rec'
 #     THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_RECIPES_PASSWORD: 'rec'
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
    networks:
      - backend-network 
    ports:
      - "12082:28080"
    depends_on:
       - kafka

volumes:
   pgdata-rec:
   pgdata-ing:
   pgdata-pro: 
   pgdata-lists:

networks:
  backend-network:
    driver: bridge
