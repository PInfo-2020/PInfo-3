version: "3.5"

services:

  #Zookeeper service provides distributed configuration management to Kafka
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper 
    hostname: zookeeper
    networks:
      - backend-network
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./target/zk-single-kafka-single/zoo1/data:/data
      - ./target/zk-single-kafka-single/zoo1/datalog:/datalog

#   kafka is the messaging backbone of the micro-service architecture. The objective is avoid point 2 point connections.
  kafka:
    image: confluentinc/cp-kafka:5.3.3
    container_name: kafka 
    hostname: kafka
    networks:
      - backend-network    
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - ./target/zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  profile-database:
    image: postgres:10
    container_name: kernel3/profile-database
    hostname: kernel3/profile-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: pro
      POSTGRES_PASSWORD: pro
      POSTGRES_DB: pro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "cpty", "-d", "profile"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-cpty:/var/lib/postgresql/data
      - ./test-data/counterparties.sql:/docker-entrypoint-initdb.d/init.sql
    restart: on-failure
    stdin_open: true
    tty: true

  #The counterparty service provides counterparty data, it is also the single version of truth for these data
  profile-service:
    container_name: profile-service  
    image: kernel3/profile-service:latest
    hostname: profile-service
    environment:
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_COUNTERPARTYDS_CONNECTION_DASH_URL: "jdbc:postgresql://profile-service:5432/profile"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_COUNTERPARTYDS_DRIVER_DASH_NAME: 'postgresql'   
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_COUNTERPARTYDS_USER_DASH_NAME: 'pro'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_COUNTERPARTYDS_PASSWORD: 'pro'
    networks:
      - backend-network    
    ports:
      - "12086:28080"
    depends_on:
       - counterparty-database

  chat-service:
    container_name: chat-service    
    image: kernel3/chat-service:latest
    hostname: chat-service
    networks:
      - backend-network
    ports:
      - "12085:28080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
    depends_on:
       - kafka

  facebook-service:
    container_name: facebook-service    
    image: kernel3/facebook-service:latest
    hostname: facebook-service
    networks:
      - backend-network
    ports:
      - "12084:28080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"      
    depends_on:
       - kafka

  filtering-service:
    container_name: filtering-service    
    image: kernel3/filtering-service:latest
    hostname: filtering-service
    networks:
      - backend-network
    ports:
      - "12083:28080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"      
    depends_on:
       - kafka

  insta-service:
    container_name: insta-service    
    image: kernel3/insta-service:latest
    hostname: insta-service
    networks:
      - backend-network
    ports:
      - "12082:28080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"      
    depends_on:
       - kafka

  publication-service:
    container_name: publication-service    
    image: kernel3/publication-service:latest
    hostname: publication-service
    networks:
      - backend-network
    ports:
      - "12081:28080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"      
    depends_on:
       - kafka
 
  twitter-service:
    container_name: twitter-service    
    image: kernel3/twitter-service:latest
    hostname: twitter-service
    networks:
      - backend-network
    ports:
      - "12080:28080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"      
    depends_on:
       - kafka
volumes:
   pgdata-cpty:
   pgdata-inst:
  

networks:
  backend-network:
    driver: bridge
